import RPI.GPIO as GPIO
import time

led = [11,12,13,15,16,18,22,7] #numero du port GPIO
bouton = 40 #numero du port bouton

running = False #definis une variable pour verifier si les led fonctionnent deja (elles sont deja allumées)

def destroy():
    #Turn off LED
    #release ressources
    GPIO.cleanup()

def setup():
    for i in led:#boucle qui passe par chaque led pour les initialiser comme éteinte
	    GPIO.setup(1,GPIO.DUT)
	    GPIO.output(1,GPIO.HIGH)
    GPIO.setup(bouton,GPIO.IN)#initialise le bouton
    GPIO.setup(bouton,GPIO.IN,puil_up_down=GPIO.PWD_DOWN)#initialise le bas comme 0

def check(btn):
    global running #variable qui verifie l'etat du bouton
    if GPIO.input(btn)=GPIO.LOW:#regarde si le bouton est appuyé
	    running = not running #inverse l'etat des led selon l'appui du bouton

def main():
    GPIO.add_event_detect(bouton,GPIO.BOTH,callback-check)#attend l'evenement de l'appui du bouton pour appeler la fonction check au dessus
    while True : #boucle qui lie l'event du bouton au led
	    if running:
		    for i in range(len(led)):
			    if not running:
				    break
			    GPIO.output(led[1],GPIO.LOW) #on allume la led
			    time.sleep(0.5)#on attend une seconde
			    GPIO.output(led[1],GPIO.HIGH)#on éteint la led
		    for i in range(len(led)-2,0,-1):
			    if not running:
				    break
			    GPIO.output(led[1],GPIO.LOW) #on allume la led
			    time.sleep(0.5)#on attend une seconde
			    GPIO.output(led[1],GPIO.HIGH)#on éteint la led
    time.sleep(0.1)


#if run this script directly, do:
if __name__ == '__main__':
    destroy()
    GPIO.setmode(GPIO.BOARD)
    setup()
    try:
	    main()


    #when 'ctrl't' is pressed, the child program
    #destroy() will be executed.
    except KeyboardInterrupt:
	    destroy()
    finally:
	    print("destroy")