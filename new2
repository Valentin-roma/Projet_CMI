import RPi.GPIO as GPIO  # Importation de la bibliothèque pour contrôler les GPIO
import time  # Importation de la bibliothèque pour gérer les délais

# Configuration des broches
LED_PIN = 17  # Broche GPIO pour la LED
BUTTON_PIN = 27  # Broche GPIO pour le bouton poussoir

# Variable pour suivre l'état de la LED
led_state = False  # La LED est éteinte par défaut

# Fonction de callback pour l'interruption
def button_callback(channel):
    global led_state  # Utilisation de la variable globale
    led_state = not led_state  # Inversion de l'état de la LED
    GPIO.output(LED_PIN, led_state)  # Mise à jour de l'état de la LED
    print("LED allumée" if led_state else "LED éteinte")  # Affichage de l'état

# Initialisation des GPIO
GPIO.setmode(GPIO.BCM)  # Utilisation de la numérotation BCM des GPIO
GPIO.setup(LED_PIN, GPIO.OUT)  # Configuration de la broche LED en sortie
GPIO.setup(BUTTON_PIN, GPIO.IN, pull_up_down=GPIO.PUD_UP)  # Configuration de la broche bouton en entrée avec résistance de pull-up

# Configuration de l'interruption
GPIO.add_event_detect(BUTTON_PIN, GPIO.FALLING, callback=button_callback, bouncetime=300)  # Détection d'un appui sur le bouton

try:
    while True:  # Boucle infinie pour maintenir le programme actif
        time.sleep(1)  # Réduction de l'utilisation du CPU

except KeyboardInterrupt:  # Gestion de l'interruption par Ctrl+C
    print("Programme arrêté")

finally:
    GPIO.cleanup()  # Nettoyage des GPIO